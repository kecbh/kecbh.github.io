<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>十大排序算法(经典)</title>
    <link href="/2022/07/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%80/"/>
    <url>/2022/07/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h1><p>这是一种基于交换的排序，这里用升序举例，若后一个数比当前的数小则交换两者数值，以此进行到<br />末尾两个数为止。这样最大的数就被排到了最后一位，下一轮又把第二大的数排到倒数第二位，依此类推。<br />最终我们一共要冒泡n次，每次冒泡循环n-1次<br />下面是基础的冒泡排序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 20</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length)</span>   <span class="hljs-comment">//打印数组</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n----------------------------\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (length-- &amp;&amp; flag)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[i+<span class="hljs-number">1</span>]&lt;arr[i])<br>            &#123;<br>                <span class="hljs-type">int</span> temp=arr[i];<br>                arr[i]=arr[i+<span class="hljs-number">1</span>];<br>                arr[i+<span class="hljs-number">1</span>]=temp;<br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[MAXSIZE]=&#123;<span class="hljs-number">11</span>,<span class="hljs-number">21</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>,<span class="hljs-number">8</span>,<span class="hljs-number">35</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,<span class="hljs-number">45</span>,<span class="hljs-number">67</span>,<span class="hljs-number">89</span>,<span class="hljs-number">45</span>,<span class="hljs-number">17</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>&#125;;<br>    <span class="hljs-built_in">showArr</span>(arr,MAXSIZE);    <span class="hljs-comment">//初始序列</span><br>    <span class="hljs-built_in">sortArr</span>(arr,MAXSIZE);<br>    <span class="hljs-built_in">showArr</span>(arr,MAXSIZE);    <span class="hljs-comment">//排序后序列</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//这是基础版的冒泡排序</span><br></code></pre></td></tr></table></figure><p>考虑上面的排序机制，可以发现，每一次都会进行完整的冒泡，这样不管原本的序列混乱度如何，每次都会把程序执行完。因此考虑让程序优化。<br />优化思路:设置flag来检测当前序列是否已经达到完全有序状态，若达到，这不在，不在继续循环。若未依旧没有排好序则继续执行程序。<br />运行结果：<br /><img src="/img/0713.png" alt="" /></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">//其它地方都一样，我们只改变排序函数sortArr</span><br><span class="hljs-type">void</span> sortArr(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> <span class="hljs-built_in">length</span>)<br>&#123;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//flag为1则进入循环表示当前数组不是完全有序的</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">length</span>-- &amp;&amp; flag)<br>    &#123;<br>         flag=<span class="hljs-number">0</span>;<br>         <span class="hljs-comment">//把flag置0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">length</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[i+<span class="hljs-number">1</span>]&lt;arr[i])<br>            &#123;<br>                flag=<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//出现了非有序关系。所仪改变flag为1</span><br>                <span class="hljs-type">int</span> temp=arr[i];<br>                arr[i]=arr[i+<span class="hljs-number">1</span>];<br>                arr[i+<span class="hljs-number">1</span>]=temp;<br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;<br><span class="hljs-comment">//这是优化过的冒泡排序，筛选掉了后期的无效排序</span><br></code></pre></td></tr></table></figure><p>运行结果:<br /><img src="/img/0713.png" alt="" /><br />我们看到结果一致，但比较两种机制，显然优化后的程序效率有略微提升。</p><h1 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h1><p>这是基于冒泡排序的的改进，在每一轮比较中选出最小的放到最前面，<br />以此进行n-1轮，因为最后一轮只有一个数，所以不用在进行交换。<br />下面是选择排序的函数:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">void</span> seclectArr(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> <span class="hljs-built_in">length</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">length</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> k=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-built_in">length</span>;j++)<br>           <span class="hljs-keyword">if</span>(arr[j]&lt;arr[k])<br>             k=j;<br>        <span class="hljs-type">int</span> temp=arr[i];arr[i]=arr[k];arr[k]=temp;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>注：因为在每次排序完成后。数组前面部分已经有序(已经是最小的)，所以内成循环不用从头卡开始，而是从当前位置往后。<br />主函数中调用后运行结果:<br /><img src="/img/0714.png" alt="" /><br />结果依然未变</p><h1 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h1><p>插入排序是专门针对有序度高的序列的排序，思想是通过交换，<br />在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动。对于数量少且有序度高的序列，其效率可观。<br />插入排序函数:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void insert<span class="hljs-constructor">Arr(<span class="hljs-params">int</span> <span class="hljs-params">arr</span>[],<span class="hljs-params">int</span> <span class="hljs-params">length</span>)</span><br>&#123;<br>    count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;length;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i;j&gt;=<span class="hljs-number">1</span><span class="hljs-operator"> &amp;&amp; </span>arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>&lt;arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>-<span class="hljs-number">1</span>]</span>;j--)<br>        &#123;<br>            count++;<br>            <span class="hljs-built_in">int</span> temp=arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>-<span class="hljs-number">1</span>]</span>;<br>            arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>-<span class="hljs-number">1</span>]</span>=arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>            arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>=temp;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr<span class="hljs-literal">[MAXSIZE]</span>=&#123;<span class="hljs-number">11</span>,<span class="hljs-number">21</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>,<span class="hljs-number">8</span>,<span class="hljs-number">35</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,<span class="hljs-number">45</span>,<span class="hljs-number">67</span>,<span class="hljs-number">89</span>,<span class="hljs-number">45</span>,<span class="hljs-number">17</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>&#125;;<br>    show<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;    <span class="hljs-comment">//初始序列</span><br>    insert<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;<br>    show<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;    <span class="hljs-comment">//排序后序列</span><br><br>    sort<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;<br>    printf(<span class="hljs-string">&quot;count=%d\n&quot;</span>,count);<br>    seclect<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;<br>    printf(<span class="hljs-string">&quot;count=%d\n&quot;</span>,count);<br>    insert<span class="hljs-constructor">Arr(<span class="hljs-params">arr</span>,MAXSIZE)</span>;<br>    printf(<span class="hljs-string">&quot;count=%d\n&quot;</span>,count);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//count用于计数循环次数</span><br></code></pre></td></tr></table></figure><p>结果展示:<br /><img src="/img/0715.png" alt="" /><br />可以看到，对于有序数组，插入排序效率明显高于冒泡和选择。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
